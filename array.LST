MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 
                      00002 ; PICBASIC PRO(TM) Compiler 2.47, (c) 1998, 2006 microEngineering Labs, Inc. All Rights Reserved.  
  00000001            00003 _USED                   EQU     1
                      00004 
                      00005         INCLUDE "C:\PBP\18F2420.INC"
                      00001 ;****************************************************************
                      00002 ;*  18F2420.INC                                                 *
                      00003 ;*                                                              *
                      00004 ;*  By        : Leonard Zerman, Jeff Schmoyer                   *
                      00005 ;*  Notice    : Copyright (c) 2006 microEngineering Labs, Inc.  *
                      00006 ;*              All Rights Reserved                             *
                      00007 ;*  Date      : 06/05/06                                        *
                      00008 ;*  Version   : 2.47                                            *
                      00009 ;*  Notes     :                                                 *
                      00010 ;****************************************************************
                      00017         LIST
                      00018         LIST p = 18F2420, r = dec, w = -311, w = -230, f = inhx32
                      00019         INCLUDE "P18F2420.INC"   ; MPASM  Header
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC18F2420 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      01291         LIST
300000 F1FF           00020         __CONFIG    _CONFIG1H, _OSC_XT_1H
300002 F31F           00021         __CONFIG    _CONFIG2H, _WDT_ON_2H & _WDTPS_512_2H
300004 FDFF           00022         __CONFIG    _CONFIG3H, _PBADEN_OFF_3H
300006 FFBB           00023         __CONFIG    _CONFIG4L, _LVP_OFF_4L & _XINST_OFF_4L
                      00026         LIST
  00F00000            00027 EEPROM_START    EQU     0F00000h
  00000040            00028 BLOCK_SIZE      EQU     64
                      00006 
                      00007 
                      00008 ; Define statements.
                      00009 #define         OSC              8
                      00010 #define         LCD_DREG                 PORTC
                      00011 #define         LCD_DBIT                 4
                      00012 #define         LCD_RSREG                PORTC
                      00013 #define         LCD_RSBIT                0
                      00014 #define         LCD_EREG                 PORTC
                      00015 #define         LCD_EBIT                 3
                      00016 #define         LCD_BITS                 4
                      00017 #define         LCD_LINES                2
                      00018 #define         ADC_BITS                 10
                      00019 #define         ADC_SAMPLEUS             50 
                      00020 
  00000000            00021 RAM_START                       EQU     00000h
  000002FF            00022 RAM_END                         EQU     002FFh
  00000003            00023 RAM_BANKS                       EQU     00003h
  00000080            00024 BANK0_START                     EQU     00080h
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  000000FF            00025 BANK0_END                       EQU     000FFh
  00000100            00026 BANK1_START                     EQU     00100h
  000001FF            00027 BANK1_END                       EQU     001FFh
  00000200            00028 BANK2_START                     EQU     00200h
  000002FF            00029 BANK2_END                       EQU     002FFh
  00000000            00030 BANKA_START                     EQU     00000h
  0000007F            00031 BANKA_END                       EQU     0007Fh
                      00032 
  00000000            00033 FLAGS                           EQU     RAM_START + 000h
  00000001            00034 R0                              EQU     RAM_START + 001h
  00000003            00035 R1                              EQU     RAM_START + 003h
  00000005            00036 R2                              EQU     RAM_START + 005h
  00000007            00037 R3                              EQU     RAM_START + 007h
  00000009            00038 R4                              EQU     RAM_START + 009h
  0000000B            00039 R5                              EQU     RAM_START + 00Bh
  0000000D            00040 R6                              EQU     RAM_START + 00Dh
  0000000F            00041 R7                              EQU     RAM_START + 00Fh
  00000011            00042 R8                              EQU     RAM_START + 011h
  00000013            00043 GOP                             EQU     RAM_START + 013h
  00000014            00044 RM1                             EQU     RAM_START + 014h
  00000015            00045 RM2                             EQU     RAM_START + 015h
  00000016            00046 RR1                             EQU     RAM_START + 016h
  00000017            00047 RR2                             EQU     RAM_START + 017h
  00000018            00048 RS1                             EQU     RAM_START + 018h
  00000019            00049 RS2                             EQU     RAM_START + 019h
  0000001A            00050 _adval                          EQU     RAM_START + 01Ah
  0000001C            00051 _i                              EQU     RAM_START + 01Ch
  0000001E            00052 _op                             EQU     RAM_START + 01Eh
  00000020            00053 _array                          EQU     RAM_START + 020h
  00000F81            00054 _PORTL                          EQU      PORTB
  00000F82            00055 _PORTH                          EQU      PORTC
  00000F93            00056 _TRISL                          EQU      TRISB
  00000F94            00057 _TRISH                          EQU      TRISC
                      00058 
                      00059 ; EEPROM data.
                      00060 
                      00061 
                      00062         INCLUDE "ARRAY.MAC"
                      00001 
                      00051         LIST
                      00063         INCLUDE "C:\PBP\PBPPIC18.LIB"
                      00001 ;******************************************************************
                      00002 ;*  PBPPIC18.LIB                                                  *
                      00003 ;*                                                                *
                      00004 ;*  By        : Leonard Zerman, Jeff Schmoyer                     *
                      00005 ;*  Notice    : Copyright (c) 2006 microEngineering Labs, Inc.    *
                      00006 ;*              All Rights Reserved                               *
                      00007 ;*  Date      : 06/05/06                                          *
                      00008 ;*  Version   : 2.47                                              *
                      00009 ;*  Notes     :                                                   *
                      00010 ;******************************************************************
                      00079   LIST
                      00080 ; Oscillator is 8MHz
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01147   LIST
000000                01148     ORG RESET_ORG               ; Reset vector at 0
                      01152   LIST
000000 6A00           01153         clrf    FLAGS           ; Clear all flags on reset
                      01157   LIST
000002 EFCE F000      01158         goto    INIT            ; Finish initialization
                      02911   LIST
000006 50E9           02912 LCDOUTJ movf    FSR0L, W        ; Jumpman entry
                      02918   LIST
000008 6E08           02919 LCDOUT  movwf   R3 + 1          ; Save char
                      02920 
00000A 9682           02921         bcf     LCD_EREG, LCD_EBIT      ; Set E low
00000C 9082           02922         bcf     LCD_RSREG, LCD_RSBIT    ; Set command register select
00000E 9082           02923         bcf     LCD_RWREG, LCD_RWBIT    ; Set RW low (write)
                      02924 
000010 9694           02925         bcf     (LCD_EREG) + 12h, LCD_EBIT      ; Set E to output
000012 9094           02926         bcf     (LCD_RSREG) + 12h, LCD_RSBIT    ; Set RS to output
000014 9094           02927         bcf     (LCD_RWREG) + 12h, LCD_RWBIT    ; Set RW to output
                      02928     if (LCD_BITS == 8)
                      02929         clrf    (LCD_DREG) + 12h        ; Set port to all output
                      02930     else
                      02931       if (LCD_DBIT == 0)
                      02932         movlw   0f0h
                      02933       else
000016 0E0F           02934         movlw   0fh
                      02935       endif
000018 1694           02936         andwf   (LCD_DREG) + 12h, F     ; Set proper half of port to output
00001A 5008           02937         movf    R3 + 1, W       ; Get back char
                      02938     endif
                      02939 
00001C B200           02940         btfsc   LCDINITFLAG     ; Has lcd been inititalized?
00001E D022           02941         bra     lcdout1         ; Yes
                      02942 
000020 0E3A           02943         movlw   high 15000      ; Wait at least 15ms
000022 6E02           02944         movwf   R0 + 1
000024 0E98           02945         movlw   low 15000
000026 EC87 F000      02946         call    PAUSEUSL
                      02947 
00002A 0E33           02948         movlw   33h             ; Init lcd
00002C 6E07           02949         movwf   R3              ; Save char
00002E D82F           02950         rcall   lcdloop         ; Send init
                      02951 
000030 0E13           02952         movlw   high 5000       ; Wait at least 5ms
000032 6E02           02953         movwf   R0 + 1
000034 0E88           02954         movlw   low 5000
000036 EC87 F000      02955         call    PAUSEUSL
                      02956 
00003A D829           02957         rcall   lcdloop         ; Send init again
                      02958 
00003C 0E64           02959         movlw   100             ; Wait at least 100us
00003E EC86 F000      02960         call    PAUSEUS
                      02961 
000042 D825           02962         rcall   lcdloop         ; Send init more time
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02963 
000044 0E64           02964         movlw   100             ; Wait at least 100us
000046 EC86 F000      02965         call    PAUSEUS
                      02966 
                      02967     if (LCD_BITS != 8)
00004A 0E22           02968         movlw   22h             ; Set 4-bit mode
00004C 6E07           02969         movwf   R3              ; Save character
00004E D81F           02970         rcall   lcdloop         ; Set interface to 4-bit mode
                      02971     endif
                      02972 
                      02973     if (LCD_BITS == 8)
                      02974       if (LCD_LINES == 1)
                      02975         movlw   30h             ; 8-bit mode, 1 line, 5x7 font
                      02976       else
                      02977         movlw   38h             ; 8-bit mode, 2+ lines, 5x7 font
                      02978       endif
                      02979     else
                      02980       if (LCD_LINES == 1)
                      02981         movlw   20h             ; 4-bit mode, 1 line, 5x7 font
                      02982       else
000050 0E28           02983         movlw   28h             ; 4-bit mode, 2+ lines, 5x7 font
                      02984       endif
                      02985     endif
000052 D807           02986         rcall   lcdoutcom       ; Send function set
                      02987 
000054 0E0C           02988         movlw   0ch             ; Display on, no cursor, no blink
000056 D805           02989         rcall   lcdoutcom
                      02990 
000058 0E06           02991         movlw   06h             ; Lcd entry mode set, increment, no shift
00005A D803           02992         rcall   lcdoutcom
                      02993 
00005C 8200           02994         bsf     LCDINITFLAG     ; Set to initialized
                      02995 
00005E 5008           02996         movf    R3 + 1, W       ; Get saved char back
000060 D001           02997         bra     lcdout1
                      02998 
000062 8000           02999 lcdoutcom bsf   LCDCDFLAG       ; Set command
                      03000 
000064 6E07           03001 lcdout1 movwf   R3              ; Save char if 4 bit
000066 A000           03002         btfss   LCDCDFLAG       ; Command this time?
000068 D00B           03003         bra     lcdchkcd        ; No
                      03004 
00006A 9082           03005         bcf     LCD_RSREG, LCD_RSBIT    ; Set command register select
00006C 0803           03006         sublw   3
00006E E30E           03007         bnc     lcdsend         ; Short delay
                      03008 
000070 D80D           03009         rcall   lcdsend         ; Long delay
000072 0E07           03010         movlw   high LCD_COMMANDUS      ; Wait for command to complete
000074 6E02           03011         movwf   R0 + 1
000076 0ED0           03012         movlw   low LCD_COMMANDUS
000078 EC87 F000      03013         call    PAUSEUSL
00007C 80D8           03014         bsf     STATUS, C       ; Set no timeout for Serout2mod
00007E 0012           03015         return
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03016 
000080 8000           03017 lcdchkcd bsf    LCDCDFLAG       ; Indicate first nibble (or command next time)
000082 08FE           03018         sublw   0feh            ; Command next time? (char still in W)
000084 B4D8           03019         btfsc   STATUS, Z
000086 EFCB F000      03020         goto    DUNN            ; Yes - nothing to do this time (C set)
                      03021 
00008A 8082           03022         bsf     LCD_RSREG, LCD_RSBIT    ; Set data register select
                      03023 
00008C                03024 lcdsend
                      03025     if (LCD_BITS == 8)
                      03026 lcdloop bsf     LCD_EREG, LCD_EBIT      ; Enabled
                      03027         movf    R3, W           ; Get char back
                      03028         movwf   LCD_DREG        ; Write char to the port
                      03029       if (OSC > 16)
                      03030         nop                     ; Minimum 1us enable time
                      03031       endif
                      03032       if (OSC > 20)
                      03033         bra     $ + 2
                      03034       endif
                      03035       if (OSC > 25)
                      03036         bra     $ + 2
                      03037       endif
                      03038       if (OSC > 33)
                      03039         nop
                      03040       endif
                      03041       if (OSC > 40)
                      03042         bra     $ + 2
                      03043       endif
                      03044         bcf     LCDCDFLAG       ; Indicate data next time
                      03045         bcf     LCD_EREG, LCD_EBIT      ; Not enabled
                      03046     else
                      03047 
                      03048       if (LCD_DBIT == 0)
                      03049         swapf   R3, F           ; Swap top and bottom nibbles
                      03050       endif
                      03051 
00008C A000           03052         btfss   LCDCDFLAG       ; First time through only
00008E 9000           03053 lcdloop bcf     LCDCDFLAG       ; Indicate second nibble (and data next time)
                      03054 
000090 8682           03055         bsf     LCD_EREG, LCD_EBIT      ; Enabled
                      03056 
                      03057       if (LCD_DBIT == 0)
                      03058         movlw   0f0h            ; Clear lcd data port
                      03059       else
000092 0E0F           03060         movlw   0fh             ; Clear lcd data port
                      03061       endif
000094 1682           03062         andwf   LCD_DREG, F
                      03063 
000096 5007           03064         movf    R3, W           ; Isolate proper nibble of char
                      03065       if (LCD_DBIT == 0)
                      03066         andlw   0fh
                      03067       else
000098 0BF0           03068         andlw   0f0h
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      03069       endif
00009A 1282           03070         iorwf   LCD_DREG, F     ; Write char to port
                      03071 
                      03072       if (OSC > 20)
                      03073         nop                     ; Minimum 1us enable time
                      03074       endif
                      03075       if (OSC > 25)
                      03076         bra     $ + 2
                      03077       endif
                      03078       if (OSC > 33)
                      03079         nop
                      03080       endif
                      03081       if (OSC > 40)
                      03082         bra     $ + 2
                      03083       endif
                      03084 
00009C 9682           03085         bcf     LCD_EREG, LCD_EBIT      ; Not enabled - that's four
00009E 3A07           03086         swapf   R3, F           ; Get to other nibble
                      03087 
                      03088       if (OSC > 20)
                      03089         nop                     ; Minimum 1us not-enabled time
                      03090       endif
                      03091       if (OSC > 25)
                      03092         bra     $ + 2
                      03093       endif
                      03094       if (OSC > 33)
                      03095         nop
                      03096       endif
                      03097       if (OSC > 40)
                      03098         bra     $ + 2
                      03099       endif
                      03100 
0000A0 B000           03101         btfsc   LCDCDFLAG
0000A2 D7F5           03102         bra     lcdloop         ; Send lower 4 to lcd
                      03103     endif
                      03104 
0000A4 0E32           03105         movlw   LCD_DATAUS      ; Wait for data operation to complete
0000A6 EC86 F000      03106         call    PAUSEUS
0000AA 80D8           03107         bsf     STATUS, C       ; Set no timeout for Serout2mod
0000AC EFCB F000      03108         goto    DUNN
                      05040   LIST
0000B0 9E13           05041 SEROUT2DEC bcf  GOP, 7          ; Blanking off
0000B2 500A           05042         movf    R4 + 1, W       ; 0 digits?
0000B4 B4D8           05043         btfsc   STATUS, Z
0000B6 8E13           05044         bsf     GOP, 7          ; Yes, blanking on
0000B8 0E05           05045         movlw   5               ; 5 digits max to do
0000BA 6E09           05046         movwf   R4
0000BC 0E27           05047         movlw   high 10000      ; Find 10,000s
0000BE 6E04           05048         movwf   R1 + 1
0000C0 0E10           05049         movlw   low 10000
0000C2 D80C           05050         rcall   serout2ddig     ; Do the work
                      05051       ifdef SEROUT2TO_USED
                      05052         btfss   STATUS, C       ; Timed out?
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      05053         return                  ; Yes
                      05054       endif
0000C4 0E03           05055         movlw   high 1000       ; Find 1,000s
0000C6 6E04           05056         movwf   R1 + 1
0000C8 0EE8           05057         movlw   low 1000
0000CA D808           05058         rcall   serout2ddig     ; Do the work
                      05059       ifdef SEROUT2TO_USED
                      05060         btfss   STATUS, C       ; Timed out?
                      05061         return                  ; Yes
                      05062       endif
0000CC 6A04           05063         clrf    R1 + 1          ; Find 100s
0000CE 0E64           05064         movlw   100
0000D0 D805           05065         rcall   serout2ddig     ; Do the work
                      05066       ifdef SEROUT2TO_USED
                      05067         btfss   STATUS, C       ; Timed out?
                      05068         return                  ; Yes
                      05069       endif
0000D2 6A04           05070         clrf    R1 + 1          ; Find 10s
0000D4 0E0A           05071         movlw   10
0000D6 D802           05072         rcall   serout2ddig     ; Do the work
                      05073       ifdef SEROUT2TO_USED
                      05074         btfss   STATUS, C       ; Timed out?
                      05075         return                  ; Yes
                      05076       endif
0000D8 5005           05077         movf    R2, W           ; Get the 1s
0000DA D008           05078         bra     SEROUT2SEND     ; Send the 1s and exit
                      05079 
0000DC 6E03           05080 serout2ddig movwf R1            ; Save last piece
0000DE 5006           05081         movf    R2 + 1, W       ; Move remainder to dividend
0000E0 6E02           05082         movwf   R0 + 1
0000E2 5005           05083         movf    R2, W
0000E4 6E01           05084         movwf   R0
0000E6 ECAD F000      05085         call    DIV             ; Do the math
0000EA 5001           05086         movf    R0, W           ; Get the result
                      05087 ;       bra     SEROUT2SEND     ; Fall through
                      05094   LIST
0000EC 6E01           05095 SEROUT2SEND movwf R0            ; Save char for a moment
0000EE 4E09           05096         dcfsnz  R4, F           ; Bump down count while we're here
0000F0 9E13           05097         bcf     GOP, 7
0000F2 500A           05098         movf    R4 + 1, W       ; Get number of digits to send
0000F4 E003           05099         bz      serout2send1    ; If zero digits skip count compare
0000F6 5C09           05100         subwf   R4, W           ; Send if within count
0000F8 B0D8           05101         btfsc   STATUS, C
0000FA 0012           05102         return
0000FC 5001           05103 serout2send1 movf  R0, W        ; Get char back
                      05104       ifdef SEROUT2TO_USED
                      05105         bsf     STATUS, C       ; Set carry for no timeout in case of blanking
                      05106       endif
0000FE A4D8           05107         btfss   STATUS, Z       ; If zero, goto blank check
000100 9E13           05108         bcf     GOP, 7          ; Not zero so clear blank
000102 BE13           05109         btfsc   GOP, 7          ; If blanking on, don't send
000104 0012           05110         return
000106 0F30           05111         addlw   '0'             ; Add ASCII offset
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000108 EFC5 F000      05112         goto    JUMPMAN         ; Send it
                      06319   LIST
00010C 6A02           06320 PAUSEUS clrf    R0 + 1          ; 1
00010E 0FF4           06321 PAUSEUSL addlw  -12             ; 1 Subtract overhead
000110 6E01           06322         movwf   R0              ; 1
000112 1E02           06323         comf    R0 + 1, F       ; 1
000114 0EFE           06324         movlw   -2              ; 1
000116 A0D8           06325         btfss   STATUS, C       ; 1 / 2
000118 D003           06326         bra     pauseush        ; 2 / 0
00011A 2601           06327 pauseusloop addwf R0, F         ; 1
00011C B0D8           06328         btfsc   STATUS, C       ; 1 / 2
00011E D7FD           06329         bra     pauseusloop     ; 2 / 0
000120 2601           06330 pauseush addwf  R0, F           ; 1 Do an extra countdown
                      06331         CLRWDT?NOP              ; 1 Keep Watchdog clear
                          M     ifndef NO_CLRWDT
000122 0004               M         clrwdt
                          M     else
                          M         nop
                          M     endif
000124 3E02           06332         incfsz  R0 + 1, F       ; 1 / 2
000126 D7F9           06333         bra     pauseusloop     ; 2 / 0
000128 0000           06334         nop                     ; 1
00012A B001           06335         btfsc   R0, 0           ; 1 / 2
00012C D000           06336         bra     $ + 2           ; 2 / 0 Burn an extra cycle
00012E B001           06337         btfsc   R0, 0           ; 1 / 2
000130 D000           06338         bra     $ + 2           ; 2 / 0 Burn an extra cycle
000132 0012           06339         return                  ; 2 + 3 (call + setup)
                      07186   LIST
000134 6E03           07187 CMPLE   movwf   R1
000136 0E06           07188         movlw   6               ; Mask for < =
000138 D000           07189         bra     CMP
                      07271   LIST
00013A 6E09           07272 CMP     movwf   R4              ; Save compare state
00013C 5004           07273         movf    R1 + 1, W       ; Flags = MSB(R0) - MSB(R1)
00013E 5C02           07274         subwf   R0 + 1, W
000140 E102           07275         bnz     cmpnoteq        ; If unequal then done
000142 5003           07276         movf    R1, W           ; Flags = LSB(R0) - LSB(R1)
000144 5C01           07277         subwf   R0, W
000146 0E04           07278 cmpnoteq movlw  4               ; W = 4 if R0 < R1
000148 B0D8           07279         btfsc   STATUS, C
00014A 0E01           07280         movlw   1               ; W = 1 if R0 > R1
00014C B4D8           07281         btfsc   STATUS, Z
00014E 0E02           07282         movlw   2               ; W = 2 if R0 == R1
000150 1409           07283         andwf   R4, W           ; Mask for compare state
000152 A4D8           07284         btfss   STATUS, Z
000154 0EFF           07285         movlw   -1
000156 EFCB F000      07286         goto    DUNN
                      07496   LIST
00015A 6A06           07497 DIV     clrf    R2 + 1
00015C 6A05           07498         clrf    R2
                      07499 
00015E 0E10           07500 DIV32DIV movlw   16
000160 6E07           07501         movwf   R3
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      07502 
000162 3402           07503 divloop rlcf    R0 + 1, W
000164 3605           07504         rlcf    R2, F
000166 3606           07505         rlcf    R2 + 1, F
000168 5003           07506         movf    R1, W
00016A 5E05           07507         subwf   R2, F
00016C 5004           07508         movf    R1 + 1, W
00016E 5A06           07509         subwfb  R2 + 1, F
                      07510 
000170 E205           07511         bc      divok
000172 5003           07512         movf    R1, W
000174 2605           07513         addwf   R2, F
000176 5004           07514         movf    R1 + 1, W
000178 2206           07515         addwfc  R2 + 1, F
                      07516 
00017A 90D8           07517         bcf     STATUS, C
                      07518 
00017C 3601           07519 divok   rlcf    R0, F
00017E 3602           07520         rlcf    R0 + 1, F
                      07521 
000180 2E07           07522         decfsz  R3, F
000182 D7EF           07523         bra     divloop
000184 5001           07524         movf    R0, W           ; Get low byte to W
000186 EFCB F000      07525         goto    DUNN
                      07627   LIST
00018A 6EE9           07628 JUMPMAN movwf   FSR0L
00018C 6AFB           07629         clrf    PCLATU
00018E 5012           07630         movf    R8 + 1, W
000190 6EFA           07631         movwf   PCLATH
000192 5011           07632         movf    R8, W
000194 6EF9           07633         movwf   PCL
                      07647   LIST
000196 0100           07648 DUNN    movlb   0               ; 1 Reset banks to 0
                      07649 DUNN3   CLRWDT?NOP              ; 1 Hit Watchdog timer
                          M     ifndef NO_CLRWDT
000198 0004               M         clrwdt
                          M     else
                          M         nop
                          M     endif
00019A 0012           07650 DUNNRET return                  ; 2 Done
                      07663   LIST
00019C                07664 INIT
                      07708   LIST
00019C                07709 main
                      00064 
                      00065         MOVE?CB 001h, ADCON0
                          M         CHK?RP  ADCON0
                          M     if (((ADCON0) > BANKA_END) & ((ADCON0) < (0f01h + BANKA_END)))
                          M       if (((ADCON0) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (ADCON0)
                          M PREV_BANK = high (ADCON0)
                          M       endif
                          M     endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     if (low (001h) == 0)
                          M         clrf    ADCON0
                          M     else
00019C 0E01               M         movlw   low (001h)
00019E 6EC2               M         movwf   ADCON0
                          M     endif
                      00066         MOVE?CB 000h, ADCON1
                          M         CHK?RP  ADCON1
                          M     if (((ADCON1) > BANKA_END) & ((ADCON1) < (0f01h + BANKA_END)))
                          M       if (((ADCON1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (ADCON1)
                          M PREV_BANK = high (ADCON1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
0001A0 6AC1               M         clrf    ADCON1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   ADCON1
                          M     endif
                      00067         MOVE?CB 087h, ADCON2
                          M         CHK?RP  ADCON2
                          M     if (((ADCON2) > BANKA_END) & ((ADCON2) < (0f01h + BANKA_END)))
                          M       if (((ADCON2) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (ADCON2)
                          M PREV_BANK = high (ADCON2)
                          M       endif
                          M     endif
                          M     if (low (087h) == 0)
                          M         clrf    ADCON2
                          M     else
0001A2 0E87               M         movlw   low (087h)
0001A4 6EC0               M         movwf   ADCON2
                          M     endif
                      00068         MOVE?CB 0FFh, TRISA
                          M         CHK?RP  TRISA
                          M     if (((TRISA) > BANKA_END) & ((TRISA) < (0f01h + BANKA_END)))
                          M       if (((TRISA) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (TRISA)
                          M PREV_BANK = high (TRISA)
                          M       endif
                          M     endif
                          M     if (low (0FFh) == 0)
                          M         clrf    TRISA
                          M     else
0001A6 0EFF               M         movlw   low (0FFh)
0001A8 6E92               M         movwf   TRISA
                          M     endif
                      00069         MOVE?CW 005h, _array
                          M         CHK?RP  _array
                          M     if (((_array) > BANKA_END) & ((_array) < (0f01h + BANKA_END)))
                          M       if (((_array) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array)
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M PREV_BANK = high (_array)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (005h)
                          M         movwf   _array
                          M         movlw   high (005h)
                          M         movwf   (_array) + 1
                          M     else
                          M       if (low (005h) == 0)
                          M         clrf    _array
                          M       else
0001AA 0E05               M         movlw   low (005h)
0001AC 6E20               M         movwf   _array
                          M       endif
                          M       if ((high (005h)) == 0)
0001AE 6A21               M         clrf    (_array) + 1
                          M       else
                          M         movlw   high (005h)
                          M         movwf   (_array) + 1
                          M       endif
                          M     endif
                      00070         MOVE?CW 00Ah, _array + 00002h
                          M         CHK?RP  _array + 00002h
                          M     if (((_array + 00002h) > BANKA_END) & ((_array + 00002h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00002h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00002h)
                          M PREV_BANK = high (_array + 00002h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (00Ah)
                          M         movwf   _array + 00002h
                          M         movlw   high (00Ah)
                          M         movwf   (_array + 00002h) + 1
                          M     else
                          M       if (low (00Ah) == 0)
                          M         clrf    _array + 00002h
                          M       else
0001B0 0E0A               M         movlw   low (00Ah)
0001B2 6E22               M         movwf   _array + 00002h
                          M       endif
                          M       if ((high (00Ah)) == 0)
0001B4 6A23               M         clrf    (_array + 00002h) + 1
                          M       else
                          M         movlw   high (00Ah)
                          M         movwf   (_array + 00002h) + 1
                          M       endif
                          M     endif
                      00071         MOVE?CW 00Fh, _array + 00004h
                          M         CHK?RP  _array + 00004h
                          M     if (((_array + 00004h) > BANKA_END) & ((_array + 00004h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00004h) & 0f00h) != (PREV_BANK << 8))
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         movlb   high (_array + 00004h)
                          M PREV_BANK = high (_array + 00004h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (00Fh)
                          M         movwf   _array + 00004h
                          M         movlw   high (00Fh)
                          M         movwf   (_array + 00004h) + 1
                          M     else
                          M       if (low (00Fh) == 0)
                          M         clrf    _array + 00004h
                          M       else
0001B6 0E0F               M         movlw   low (00Fh)
0001B8 6E24               M         movwf   _array + 00004h
                          M       endif
                          M       if ((high (00Fh)) == 0)
0001BA 6A25               M         clrf    (_array + 00004h) + 1
                          M       else
                          M         movlw   high (00Fh)
                          M         movwf   (_array + 00004h) + 1
                          M       endif
                          M     endif
                      00072         MOVE?CW 014h, _array + 00006h
                          M         CHK?RP  _array + 00006h
                          M     if (((_array + 00006h) > BANKA_END) & ((_array + 00006h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00006h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00006h)
                          M PREV_BANK = high (_array + 00006h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (014h)
                          M         movwf   _array + 00006h
                          M         movlw   high (014h)
                          M         movwf   (_array + 00006h) + 1
                          M     else
                          M       if (low (014h) == 0)
                          M         clrf    _array + 00006h
                          M       else
0001BC 0E14               M         movlw   low (014h)
0001BE 6E26               M         movwf   _array + 00006h
                          M       endif
                          M       if ((high (014h)) == 0)
0001C0 6A27               M         clrf    (_array + 00006h) + 1
                          M       else
                          M         movlw   high (014h)
                          M         movwf   (_array + 00006h) + 1
                          M       endif
                          M     endif
                      00073         MOVE?CW 019h, _array + 00008h
                          M         CHK?RP  _array + 00008h
                          M     if (((_array + 00008h) > BANKA_END) & ((_array + 00008h) < (0f01h + BANKA_END)))
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M       if (((_array + 00008h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00008h)
                          M PREV_BANK = high (_array + 00008h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (019h)
                          M         movwf   _array + 00008h
                          M         movlw   high (019h)
                          M         movwf   (_array + 00008h) + 1
                          M     else
                          M       if (low (019h) == 0)
                          M         clrf    _array + 00008h
                          M       else
0001C2 0E19               M         movlw   low (019h)
0001C4 6E28               M         movwf   _array + 00008h
                          M       endif
                          M       if ((high (019h)) == 0)
0001C6 6A29               M         clrf    (_array + 00008h) + 1
                          M       else
                          M         movlw   high (019h)
                          M         movwf   (_array + 00008h) + 1
                          M       endif
                          M     endif
                      00074         MOVE?CW 01Eh, _array + 0000Ah
                          M         CHK?RP  _array + 0000Ah
                          M     if (((_array + 0000Ah) > BANKA_END) & ((_array + 0000Ah) < (0f01h + BANKA_END)))
                          M       if (((_array + 0000Ah) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 0000Ah)
                          M PREV_BANK = high (_array + 0000Ah)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (01Eh)
                          M         movwf   _array + 0000Ah
                          M         movlw   high (01Eh)
                          M         movwf   (_array + 0000Ah) + 1
                          M     else
                          M       if (low (01Eh) == 0)
                          M         clrf    _array + 0000Ah
                          M       else
0001C8 0E1E               M         movlw   low (01Eh)
0001CA 6E2A               M         movwf   _array + 0000Ah
                          M       endif
                          M       if ((high (01Eh)) == 0)
0001CC 6A2B               M         clrf    (_array + 0000Ah) + 1
                          M       else
                          M         movlw   high (01Eh)
                          M         movwf   (_array + 0000Ah) + 1
                          M       endif
                          M     endif
                      00075         MOVE?CW 023h, _array + 0000Ch
                          M         CHK?RP  _array + 0000Ch
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     if (((_array + 0000Ch) > BANKA_END) & ((_array + 0000Ch) < (0f01h + BANKA_END)))
                          M       if (((_array + 0000Ch) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 0000Ch)
                          M PREV_BANK = high (_array + 0000Ch)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (023h)
                          M         movwf   _array + 0000Ch
                          M         movlw   high (023h)
                          M         movwf   (_array + 0000Ch) + 1
                          M     else
                          M       if (low (023h) == 0)
                          M         clrf    _array + 0000Ch
                          M       else
0001CE 0E23               M         movlw   low (023h)
0001D0 6E2C               M         movwf   _array + 0000Ch
                          M       endif
                          M       if ((high (023h)) == 0)
0001D2 6A2D               M         clrf    (_array + 0000Ch) + 1
                          M       else
                          M         movlw   high (023h)
                          M         movwf   (_array + 0000Ch) + 1
                          M       endif
                          M     endif
                      00076         MOVE?CW 028h, _array + 0000Eh
                          M         CHK?RP  _array + 0000Eh
                          M     if (((_array + 0000Eh) > BANKA_END) & ((_array + 0000Eh) < (0f01h + BANKA_END)))
                          M       if (((_array + 0000Eh) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 0000Eh)
                          M PREV_BANK = high (_array + 0000Eh)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (028h)
                          M         movwf   _array + 0000Eh
                          M         movlw   high (028h)
                          M         movwf   (_array + 0000Eh) + 1
                          M     else
                          M       if (low (028h) == 0)
                          M         clrf    _array + 0000Eh
                          M       else
0001D4 0E28               M         movlw   low (028h)
0001D6 6E2E               M         movwf   _array + 0000Eh
                          M       endif
                          M       if ((high (028h)) == 0)
0001D8 6A2F               M         clrf    (_array + 0000Eh) + 1
                          M       else
                          M         movlw   high (028h)
                          M         movwf   (_array + 0000Eh) + 1
                          M       endif
                          M     endif
                      00077         MOVE?CW 02Dh, _array + 00010h
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         CHK?RP  _array + 00010h
                          M     if (((_array + 00010h) > BANKA_END) & ((_array + 00010h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00010h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00010h)
                          M PREV_BANK = high (_array + 00010h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (02Dh)
                          M         movwf   _array + 00010h
                          M         movlw   high (02Dh)
                          M         movwf   (_array + 00010h) + 1
                          M     else
                          M       if (low (02Dh) == 0)
                          M         clrf    _array + 00010h
                          M       else
0001DA 0E2D               M         movlw   low (02Dh)
0001DC 6E30               M         movwf   _array + 00010h
                          M       endif
                          M       if ((high (02Dh)) == 0)
0001DE 6A31               M         clrf    (_array + 00010h) + 1
                          M       else
                          M         movlw   high (02Dh)
                          M         movwf   (_array + 00010h) + 1
                          M       endif
                          M     endif
                      00078         MOVE?CW 032h, _array + 00012h
                          M         CHK?RP  _array + 00012h
                          M     if (((_array + 00012h) > BANKA_END) & ((_array + 00012h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00012h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00012h)
                          M PREV_BANK = high (_array + 00012h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (032h)
                          M         movwf   _array + 00012h
                          M         movlw   high (032h)
                          M         movwf   (_array + 00012h) + 1
                          M     else
                          M       if (low (032h) == 0)
                          M         clrf    _array + 00012h
                          M       else
0001E0 0E32               M         movlw   low (032h)
0001E2 6E32               M         movwf   _array + 00012h
                          M       endif
                          M       if ((high (032h)) == 0)
0001E4 6A33               M         clrf    (_array + 00012h) + 1
                          M       else
                          M         movlw   high (032h)
                          M         movwf   (_array + 00012h) + 1
                          M       endif
                          M     endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00079         MOVE?CW 037h, _array + 00014h
                          M         CHK?RP  _array + 00014h
                          M     if (((_array + 00014h) > BANKA_END) & ((_array + 00014h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00014h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00014h)
                          M PREV_BANK = high (_array + 00014h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (037h)
                          M         movwf   _array + 00014h
                          M         movlw   high (037h)
                          M         movwf   (_array + 00014h) + 1
                          M     else
                          M       if (low (037h) == 0)
                          M         clrf    _array + 00014h
                          M       else
0001E6 0E37               M         movlw   low (037h)
0001E8 6E34               M         movwf   _array + 00014h
                          M       endif
                          M       if ((high (037h)) == 0)
0001EA 6A35               M         clrf    (_array + 00014h) + 1
                          M       else
                          M         movlw   high (037h)
                          M         movwf   (_array + 00014h) + 1
                          M       endif
                          M     endif
                      00080         MOVE?CW 03Ch, _array + 00016h
                          M         CHK?RP  _array + 00016h
                          M     if (((_array + 00016h) > BANKA_END) & ((_array + 00016h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00016h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00016h)
                          M PREV_BANK = high (_array + 00016h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (03Ch)
                          M         movwf   _array + 00016h
                          M         movlw   high (03Ch)
                          M         movwf   (_array + 00016h) + 1
                          M     else
                          M       if (low (03Ch) == 0)
                          M         clrf    _array + 00016h
                          M       else
0001EC 0E3C               M         movlw   low (03Ch)
0001EE 6E36               M         movwf   _array + 00016h
                          M       endif
                          M       if ((high (03Ch)) == 0)
0001F0 6A37               M         clrf    (_array + 00016h) + 1
                          M       else
                          M         movlw   high (03Ch)
                          M         movwf   (_array + 00016h) + 1
                          M       endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     endif
                      00081         MOVE?CW 041h, _array + 00018h
                          M         CHK?RP  _array + 00018h
                          M     if (((_array + 00018h) > BANKA_END) & ((_array + 00018h) < (0f01h + BANKA_END)))
                          M       if (((_array + 00018h) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_array + 00018h)
                          M PREV_BANK = high (_array + 00018h)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (041h)
                          M         movwf   _array + 00018h
                          M         movlw   high (041h)
                          M         movwf   (_array + 00018h) + 1
                          M     else
                          M       if (low (041h) == 0)
                          M         clrf    _array + 00018h
                          M       else
0001F2 0E41               M         movlw   low (041h)
0001F4 6E38               M         movwf   _array + 00018h
                          M       endif
                          M       if ((high (041h)) == 0)
0001F6 6A39               M         clrf    (_array + 00018h) + 1
                          M       else
                          M         movlw   high (041h)
                          M         movwf   (_array + 00018h) + 1
                          M       endif
                          M     endif
                      00082         MOVE?CW 000h, _i
                          M         CHK?RP  _i
                          M     if (((_i)    > BANKA_END) & ((_i)    < (0f01h + BANKA_END)))
                          M       if (((_i)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_i)
                          M PREV_BANK = high (_i)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (000h)
                          M         movwf   _i
                          M         movlw   high (000h)
                          M         movwf   (_i)   + 1
                          M     else
                          M       if (low (000h) == 0)
0001F8 6A1C               M         clrf    _i
                          M       else
                          M         movlw   low (000h)
                          M         movwf   _i
                          M       endif
                          M       if ((high (000h)) == 0)
0001FA 6A1D               M         clrf    (_i)   + 1
                          M       else
                          M         movlw   high (000h)
                          M         movwf   (_i)   + 1
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M       endif
                          M     endif
                      00083         MOVE?CW 00190h, _adval
                          M         CHK?RP  _adval
                          M     if (((_adval) > BANKA_END) & ((_adval) < (0f01h + BANKA_END)))
                          M       if (((_adval) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (_adval)
                          M PREV_BANK = high (_adval)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (00190h)
                          M         movwf   _adval
                          M         movlw   high (00190h)
                          M         movwf   (_adval) + 1
                          M     else
                          M       if (low (00190h) == 0)
                          M         clrf    _adval
                          M       else
0001FC 0E90               M         movlw   low (00190h)
0001FE 6E1A               M         movwf   _adval
                          M       endif
                          M       if ((high (00190h)) == 0)
                          M         clrf    (_adval) + 1
                          M       else
000200 0E01               M         movlw   high (00190h)
000202 6E1B               M         movwf   (_adval) + 1
                          M       endif
                          M     endif
                      00084         CMPLE?WCL       _adval, 001F4h, L00001
                          M         MOVE?WW _adval, R0
                          M         MOVE?BB _adval, R0
000204 C01A F001          M         movff   _adval, R0
                          M         MOVE?BB (_adval) + 1, (R0) + 1
000208 C01B F002          M         movff   (_adval) + 1, (R0) + 1
                          M         MOVE?CB (001F4h) >> 8, R1 + 1
                          M         CHK?RP  R1 + 1
                          M     if (((R1 + 1) > BANKA_END) & ((R1 + 1) < (0f01h + BANKA_END)))
                          M       if (((R1 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R1 + 1)
                          M PREV_BANK = high (R1 + 1)
                          M       endif
                          M     endif
                          M     if (low ((001F4h) >> 8) == 0)
                          M         clrf    R1 + 1
                          M     else
00020C 0E01               M         movlw   low ((001F4h) >> 8)
00020E 6E04               M         movwf   R1 + 1
                          M     endif
                          M         MOVE?CA low (001F4h)
000210 0EF4               M         movlw   low (low (001F4h))
                          M         L?CALL  CMPLE
                          M         RST?RP
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    CMPLE
                          M     else
                          M       if ((CMPLE) < 1)
                          M         call    CMPLE
                          M       else
                          M         if ((CMPLE) > $)
                          M         call    CMPLE
                          M         else
                          M           if ((CMPLE) < ($ - 3ffh))
                          M         call    CMPLE
                          M           else
000212 DF90               M         rcall   CMPLE
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                          M         BIT?GOTO 0, STATUS, Z, L00001
                          M     ifdef USE_LINKER
                          M         CLRWDT?
                          M     else
                          M       if ($ == (L00001))
                          M         CLRWDT?
                          M       endif
                          M     endif
                          M 
                          M     if (((STATUS) > BANKA_END) & ((STATUS) < (0f01h + BANKA_END)))
                          M         bcf     STATUS, OV
                          M         CHK?RP  STATUS
                          M       if (0      == 0)
                          M         btfss   STATUS, Z
                          M       else
                          M         btfsc   STATUS, Z
                          M       endif
                          M         bsf     STATUS, OV
                          M         RST?RP
                          M       ifdef USE_LINKER
                          M         btfsc   STATUS, OV
                          M         goto    L00001
                          M       else
                          M         if ((L00001) < 1)
                          M         btfsc   STATUS, OV
                          M         goto    L00001
                          M         else
                          M           if ((L00001) > $)
                          M         btfsc   STATUS, OV
                          M         goto    L00001
                          M           else
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M             if ((L00001) < ($ - 7fh))
                          M         btfsc   STATUS, OV
                          M         goto    L00001
                          M             else
                          M         bov     L00001
                          M             endif
                          M           endif
                          M         endif
                          M       endif
                          M     else
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M       if (0      == 0)
000214 A4D8               M         btfss   STATUS, Z
                          M       else
                          M         btfsc   STATUS, Z
                          M       endif
                          M       ifdef USE_LINKER
                          M         goto    L00001
                          M       else
                          M         if ((L00001) < 1)
                          M         goto    L00001
                          M         else
                          M           if ((L00001) > $)
000216 EF13 F001          M         goto    L00001
                          M           else
                          M             if ((L00001) < ($ - 3ffh))
                          M         goto    L00001
                          M             else
                          M         bra     L00001
                          M             endif
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00085         MOVE?WW _array + 00002h, _op
                          M         MOVE?BB _array + 00002h, _op
00021A C022 F01E          M         movff   _array + 00002h, _op
                          M         MOVE?BB (_array + 00002h) + 1, (_op) + 1
00021E C023 F01F          M         movff   (_array + 00002h) + 1, (_op) + 1
                      00086         GOTO?L  L00002
                          M         L?GOTO  L00002
                          M     ifdef USE_LINKER
                          M         CLRWDT?
                          M     else
                          M       if ($ == (L00002))
                          M         CLRWDT?
                          M       endif
                          M     endif
                          M 
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         goto    L00002
                          M     else
                          M       if ((L00002) < 1)
                          M         goto    L00002
                          M       else
                          M         if ((L00002) > $)
000222 EF27 F001          M         goto    L00002
                          M         else
                          M           if ((L00002) < ($ - 3ffh))
                          M         goto    L00002
                          M           else
                          M         bra     L00002
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00087         LABEL?L L00001  
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M     ifdef PM_USED
                          M         LALL
                          M L00001
                          M         XALL
                          M     else
000226                    M L00001
                          M     endif
                      00088         CMPLE?WCL       _adval, 0C8h, L00003
                          M         MOVE?WW _adval, R0
                          M         MOVE?BB _adval, R0
000226 C01A F001          M         movff   _adval, R0
                          M         MOVE?BB (_adval) + 1, (R0) + 1
00022A C01B F002          M         movff   (_adval) + 1, (R0) + 1
                          M         MOVE?CB (0C8h) >> 8, R1 + 1
                          M         CHK?RP  R1 + 1
                          M     if (((R1 + 1) > BANKA_END) & ((R1 + 1) < (0f01h + BANKA_END)))
                          M       if (((R1 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R1 + 1)
                          M PREV_BANK = high (R1 + 1)
                          M       endif
                          M     endif
                          M     if (low ((0C8h) >> 8) == 0)
00022E 6A04               M         clrf    R1 + 1
                          M     else
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         movlw   low ((0C8h) >> 8)
                          M         movwf   R1 + 1
                          M     endif
                          M         MOVE?CA low (0C8h)
000230 0EC8               M         movlw   low (low (0C8h))
                          M         L?CALL  CMPLE
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    CMPLE
                          M     else
                          M       if ((CMPLE) < 1)
                          M         call    CMPLE
                          M       else
                          M         if ((CMPLE) > $)
                          M         call    CMPLE
                          M         else
                          M           if ((CMPLE) < ($ - 3ffh))
                          M         call    CMPLE
                          M           else
000232 DF80               M         rcall   CMPLE
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                          M         BIT?GOTO 0, STATUS, Z, L00003
                          M     ifdef USE_LINKER
                          M         CLRWDT?
                          M     else
                          M       if ($ == (L00003))
                          M         CLRWDT?
                          M       endif
                          M     endif
                          M 
                          M     if (((STATUS) > BANKA_END) & ((STATUS) < (0f01h + BANKA_END)))
                          M         bcf     STATUS, OV
                          M         CHK?RP  STATUS
                          M       if (0      == 0)
                          M         btfss   STATUS, Z
                          M       else
                          M         btfsc   STATUS, Z
                          M       endif
                          M         bsf     STATUS, OV
                          M         RST?RP
                          M       ifdef USE_LINKER
                          M         btfsc   STATUS, OV
                          M         goto    L00003
                          M       else
                          M         if ((L00003) < 1)
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         btfsc   STATUS, OV
                          M         goto    L00003
                          M         else
                          M           if ((L00003) > $)
                          M         btfsc   STATUS, OV
                          M         goto    L00003
                          M           else
                          M             if ((L00003) < ($ - 7fh))
                          M         btfsc   STATUS, OV
                          M         goto    L00003
                          M             else
                          M         bov     L00003
                          M             endif
                          M           endif
                          M         endif
                          M       endif
                          M     else
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M       if (0      == 0)
000234 A4D8               M         btfss   STATUS, Z
                          M       else
                          M         btfsc   STATUS, Z
                          M       endif
                          M       ifdef USE_LINKER
                          M         goto    L00003
                          M       else
                          M         if ((L00003) < 1)
                          M         goto    L00003
                          M         else
                          M           if ((L00003) > $)
000236 EF23 F001          M         goto    L00003
                          M           else
                          M             if ((L00003) < ($ - 3ffh))
                          M         goto    L00003
                          M             else
                          M         bra     L00003
                          M             endif
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00089         MOVE?WW _array + 00014h, _op
                          M         MOVE?BB _array + 00014h, _op
00023A C034 F01E          M         movff   _array + 00014h, _op
                          M         MOVE?BB (_array + 00014h) + 1, (_op) + 1
00023E C035 F01F          M         movff   (_array + 00014h) + 1, (_op) + 1
                      00090         GOTO?L  L00004
                          M         L?GOTO  L00004
                          M     ifdef USE_LINKER
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         CLRWDT?
                          M     else
                          M       if ($ == (L00004))
                          M         CLRWDT?
                          M       endif
                          M     endif
                          M 
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         goto    L00004
                          M     else
                          M       if ((L00004) < 1)
                          M         goto    L00004
                          M       else
                          M         if ((L00004) > $)
000242 EF27 F001          M         goto    L00004
                          M         else
                          M           if ((L00004) < ($ - 3ffh))
                          M         goto    L00004
                          M           else
                          M         bra     L00004
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00091         LABEL?L L00003  
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M     ifdef PM_USED
                          M         LALL
                          M L00003
                          M         XALL
                          M     else
000246                    M L00003
                          M     endif
                      00092         MOVE?WW _array + 00016h, _op
                          M         MOVE?BB _array + 00016h, _op
000246 C036 F01E          M         movff   _array + 00016h, _op
                          M         MOVE?BB (_array + 00016h) + 1, (_op) + 1
00024A C037 F01F          M         movff   (_array + 00016h) + 1, (_op) + 1
                      00093         LABEL?L L00004  
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     endif
                          M     ifdef PM_USED
                          M         LALL
                          M L00004
                          M         XALL
                          M     else
00024E                    M L00004
                          M     endif
                      00094         LABEL?L L00002  
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M     ifdef PM_USED
                          M         LALL
                          M L00002
                          M         XALL
                          M     else
00024E                    M L00002
                          M     endif
                      00095         LCDOUT?C        0FEh
                          M         MOVE?CA 0FEh
00024E 0EFE               M         movlw   low (0FEh)
                          M         L?CALL  LCDOUT
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    LCDOUT
                          M     else
                          M       if ((LCDOUT) < 1)
                          M         call    LCDOUT
                          M       else
                          M         if ((LCDOUT) > $)
                          M         call    LCDOUT
                          M         else
                          M           if ((LCDOUT) < ($ - 3ffh))
                          M         call    LCDOUT
                          M           else
000250 DEDB               M         rcall   LCDOUT
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00096         LCDOUT?C        001h
                          M         MOVE?CA 001h
000252 0E01               M         movlw   low (001h)
                          M         L?CALL  LCDOUT
                          M         RST?RP
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    LCDOUT
                          M     else
                          M       if ((LCDOUT) < 1)
                          M         call    LCDOUT
                          M       else
                          M         if ((LCDOUT) > $)
                          M         call    LCDOUT
                          M         else
                          M           if ((LCDOUT) < ($ - 3ffh))
                          M         call    LCDOUT
                          M           else
000254 DED9               M         rcall   LCDOUT
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00097         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
000256 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00098         LCDOUTNUM?W     _array
                          M         MOVE?WW _array, R2
                          M         MOVE?BB _array, R2
000258 C020 F005          M         movff   _array, R2
                          M         MOVE?BB (_array) + 1, (R2) + 1
00025C C021 F006          M         movff   (_array) + 1, (R2) + 1
                      00099         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
000260 0E06               M         movlw   low (LCDOUTJ)
000262 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
000264 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
000266 DF24               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00100         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
000268 6A0A               M         clrf    R4 + 1
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00101         LCDOUTNUM?W     _array + 00002h
                          M         MOVE?WW _array + 00002h, R2
                          M         MOVE?BB _array + 00002h, R2
00026A C022 F005          M         movff   _array + 00002h, R2
                          M         MOVE?BB (_array + 00002h) + 1, (R2) + 1
00026E C023 F006          M         movff   (_array + 00002h) + 1, (R2) + 1
                      00102         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
000272 0E06               M         movlw   low (LCDOUTJ)
000274 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
000276 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
000278 DF1B               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00103         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
00027A 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00104         LCDOUTNUM?W     _array + 00004h
                          M         MOVE?WW _array + 00004h, R2
                          M         MOVE?BB _array + 00004h, R2
00027C C024 F005          M         movff   _array + 00004h, R2
                          M         MOVE?BB (_array + 00004h) + 1, (R2) + 1
000280 C025 F006          M         movff   (_array + 00004h) + 1, (R2) + 1
                      00105         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
000284 0E06               M         movlw   low (LCDOUTJ)
000286 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
000288 6A12               M         clrf    (R8)   + 1
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
00028A DF12               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00106         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
00028C 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00107         LCDOUTNUM?W     _array + 00006h
                          M         MOVE?WW _array + 00006h, R2
                          M         MOVE?BB _array + 00006h, R2
00028E C026 F005          M         movff   _array + 00006h, R2
                          M         MOVE?BB (_array + 00006h) + 1, (R2) + 1
000292 C027 F006          M         movff   (_array + 00006h) + 1, (R2) + 1
                      00108         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
000296 0E06               M         movlw   low (LCDOUTJ)
000298 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
00029A 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
00029C DF09               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00109         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
00029E 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00110         LCDOUTNUM?W     _array + 00008h
                          M         MOVE?WW _array + 00008h, R2
                          M         MOVE?BB _array + 00008h, R2
0002A0 C028 F005          M         movff   _array + 00008h, R2
                          M         MOVE?BB (_array + 00008h) + 1, (R2) + 1
0002A4 C029 F006          M         movff   (_array + 00008h) + 1, (R2) + 1
                      00111         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
0002A8 0E06               M         movlw   low (LCDOUTJ)
0002AA 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
0002AC 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
0002AE DF00               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00112         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
0002B0 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00113         LCDOUTNUM?W     _array + 0000Ah
                          M         MOVE?WW _array + 0000Ah, R2
                          M         MOVE?BB _array + 0000Ah, R2
0002B2 C02A F005          M         movff   _array + 0000Ah, R2
                          M         MOVE?BB (_array + 0000Ah) + 1, (R2) + 1
0002B6 C02B F006          M         movff   (_array + 0000Ah) + 1, (R2) + 1
                      00114         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         clrf    R8
                          M       else
0002BA 0E06               M         movlw   low (LCDOUTJ)
0002BC 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
0002BE 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
0002C0 DEF7               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00115         LCDOUT?C        0FEh
                          M         MOVE?CA 0FEh
0002C2 0EFE               M         movlw   low (0FEh)
                          M         L?CALL  LCDOUT
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    LCDOUT
                          M     else
                          M       if ((LCDOUT) < 1)
                          M         call    LCDOUT
                          M       else
                          M         if ((LCDOUT) > $)
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         call    LCDOUT
                          M         else
                          M           if ((LCDOUT) < ($ - 3ffh))
                          M         call    LCDOUT
                          M           else
0002C4 DEA1               M         rcall   LCDOUT
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00116         LCDOUT?C        0C0h
                          M         MOVE?CA 0C0h
0002C6 0EC0               M         movlw   low (0C0h)
                          M         L?CALL  LCDOUT
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    LCDOUT
                          M     else
                          M       if ((LCDOUT) < 1)
                          M         call    LCDOUT
                          M       else
                          M         if ((LCDOUT) > $)
                          M         call    LCDOUT
                          M         else
                          M           if ((LCDOUT) < ($ - 3ffh))
                          M         call    LCDOUT
                          M           else
0002C8 DE9F               M         rcall   LCDOUT
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00117         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
0002CA 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00118         LCDOUTNUM?W     _array + 0000Ch
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         MOVE?WW _array + 0000Ch, R2
                          M         MOVE?BB _array + 0000Ch, R2
0002CC C02C F005          M         movff   _array + 0000Ch, R2
                          M         MOVE?BB (_array + 0000Ch) + 1, (R2) + 1
0002D0 C02D F006          M         movff   (_array + 0000Ch) + 1, (R2) + 1
                      00119         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
0002D4 0E06               M         movlw   low (LCDOUTJ)
0002D6 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
0002D8 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
0002DA DEEA               M         rcall   SEROUT2DEC
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00120         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
0002DC 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00121         LCDOUTNUM?W     _array + 0000Eh
                          M         MOVE?WW _array + 0000Eh, R2
                          M         MOVE?BB _array + 0000Eh, R2
0002DE C02E F005          M         movff   _array + 0000Eh, R2
                          M         MOVE?BB (_array + 0000Eh) + 1, (R2) + 1
0002E2 C02F F006          M         movff   (_array + 0000Eh) + 1, (R2) + 1
                      00122         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
0002E6 0E06               M         movlw   low (LCDOUTJ)
0002E8 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
0002EA 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
0002EC DEE1               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00123         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
0002EE 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00124         LCDOUTNUM?W     _array + 00010h
                          M         MOVE?WW _array + 00010h, R2
                          M         MOVE?BB _array + 00010h, R2
0002F0 C030 F005          M         movff   _array + 00010h, R2
                          M         MOVE?BB (_array + 00010h) + 1, (R2) + 1
0002F4 C031 F006          M         movff   (_array + 00010h) + 1, (R2) + 1
                      00125         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
0002F8 0E06               M         movlw   low (LCDOUTJ)
0002FA 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
0002FC 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
0002FE DED8               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00126         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M     if (low (000h) == 0)
000300 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00127         LCDOUTNUM?W     _array + 00012h
                          M         MOVE?WW _array + 00012h, R2
                          M         MOVE?BB _array + 00012h, R2
000302 C032 F005          M         movff   _array + 00012h, R2
                          M         MOVE?BB (_array + 00012h) + 1, (R2) + 1
000306 C033 F006          M         movff   (_array + 00012h) + 1, (R2) + 1
                      00128         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
00030A 0E06               M         movlw   low (LCDOUTJ)
00030C 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
00030E 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
000310 DECF               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00129         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
000312 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00130         LCDOUTNUM?W     _array + 00014h
                          M         MOVE?WW _array + 00014h, R2
                          M         MOVE?BB _array + 00014h, R2
000314 C034 F005          M         movff   _array + 00014h, R2
                          M         MOVE?BB (_array + 00014h) + 1, (R2) + 1
000318 C035 F006          M         movff   (_array + 00014h) + 1, (R2) + 1
                      00131         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
00031C 0E06               M         movlw   low (LCDOUTJ)
00031E 6E11               M         movwf   R8
                          M       endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M       if ((high (LCDOUTJ)) == 0)
000320 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
000322 DEC6               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00132         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
000324 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00133         LCDOUTNUM?W     _array + 00016h
                          M         MOVE?WW _array + 00016h, R2
                          M         MOVE?BB _array + 00016h, R2
000326 C036 F005          M         movff   _array + 00016h, R2
                          M         MOVE?BB (_array + 00016h) + 1, (R2) + 1
00032A C037 F006          M         movff   (_array + 00016h) + 1, (R2) + 1
                      00134         LCDOUTDEC?      
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
00032E 0E06               M         movlw   low (LCDOUTJ)
000330 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
000332 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
000334 DEBD               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00135         LCDOUTCOUNT?C   000h
                          M         MOVE?CB 000h, R4 + 1
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         CHK?RP  R4 + 1
                          M     if (((R4 + 1) > BANKA_END) & ((R4 + 1) < (0f01h + BANKA_END)))
                          M       if (((R4 + 1) & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R4 + 1)
                          M PREV_BANK = high (R4 + 1)
                          M       endif
                          M     endif
                          M     if (low (000h) == 0)
000336 6A0A               M         clrf    R4 + 1
                          M     else
                          M         movlw   low (000h)
                          M         movwf   R4 + 1
                          M     endif
                      00136         LCDOUTNUM?W     _array + 00018h
                          M         MOVE?WW _array + 00018h, R2
                          M         MOVE?BB _array + 00018h, R2
000338 C038 F005          M         movff   _array + 00018h, R2
                          M         MOVE?BB (_array + 00018h) + 1, (R2) + 1
00033C C039 F006          M         movff   (_array + 00018h) + 1, (R2) + 1
                      00137         LCDOUTDEC?      
                          M         MOVE?CW LCDOUTJ, R8
                          M         CHK?RP  R8
                          M     if (((R8)    > BANKA_END) & ((R8)    < (0f01h + BANKA_END)))
                          M       if (((R8)    & 0f00h) != (PREV_BANK << 8))
                          M         movlb   high (R8)
                          M PREV_BANK = high (R8)
                          M       endif
                          M     endif
                          M     ifdef USE_LINKER
                          M         movlw   low (LCDOUTJ)
                          M         movwf   R8
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M     else
                          M       if (low (LCDOUTJ) == 0)
                          M         clrf    R8
                          M       else
000340 0E06               M         movlw   low (LCDOUTJ)
000342 6E11               M         movwf   R8
                          M       endif
                          M       if ((high (LCDOUTJ)) == 0)
000344 6A12               M         clrf    (R8)   + 1
                          M       else
                          M         movlw   high (LCDOUTJ)
                          M         movwf   (R8)   + 1
                          M       endif
                          M     endif
                          M         L?CALL  SEROUT2DEC
                          M         RST?RP
                          M     if (PREV_BANK != 0)
                          M         movlb   0
                          M PREV_BANK = 0
                          M     endif
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M 
                          M     ifdef USE_LINKER
                          M         call    SEROUT2DEC
                          M     else
                          M       if ((SEROUT2DEC) < 1)
                          M         call    SEROUT2DEC
                          M       else
                          M         if ((SEROUT2DEC) > $)
                          M         call    SEROUT2DEC
                          M         else
                          M           if ((SEROUT2DEC) < ($ - 3ffh))
                          M         call    SEROUT2DEC
                          M           else
000346 DEB4               M         rcall   SEROUT2DEC
                          M           endif
                          M         endif
                          M       endif
                          M     endif
                      00138 
                      00139         END
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 46


SYMBOL TABLE
  LABEL                             VALUE 

A                                 00000000
ABDEN                             00000000
ABDOVF                            00000007
ACCESS                            00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ACQT0                             00000003
ACQT1                             00000004
ACQT2                             00000005
ADCON0                            00000FC2
ADCON1                            00000FC1
ADCON2                            00000FC0
ADCS0                             00000000
ADCS1                             00000001
ADCS2                             00000002
ADC_BITS                          10
ADC_CLOCK                         00000003
ADC_SAMPLEUS                      50
ADDEN                             00000003
ADEN                              00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADIP                              00000006
ADMSK1                            00000001
ADMSK2                            00000002
ADMSK3                            00000003
ADMSK4                            00000004
ADMSK5                            00000005
ADON                              00000000
ADRES                             00000FC3
ADRESH                            00000FC4
ADRESL                            00000FC3
AN0                               00000000
AN1                               00000001
AN10                              00000001
AN11                              00000004
AN12                              00000000
AN2                               00000002
AN3                               00000003
AN4                               00000005
AN8                               00000002
AN9                               00000003
BANK0_END                         000000FF
BANK0_START                       00000080
BANK1_END                         000001FF
BANK1_START                       00000100
BANK2_END                         000002FF
BANK2_START                       00000200
BANKA_END                         0000007F
BANKA_START                       00000000
BANKED                            00000001
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 47


SYMBOL TABLE
  LABEL                             VALUE 

BAUDCON                           00000FB8
BAUDCTL                           00000FB8
BCLIE                             00000003
BCLIF                             00000003
BCLIP                             00000003
BF                                00000000
BGST                              00000005
BIT?FLIP                          
BIT?GOTO                          
BIT?R1                            
BIT?R2                            
BIT?W                             
BLOCK_SIZE                        00000040
BOR                               00000000
BRG16                             00000003
BRGH                              00000002
BSR                               00000FE0
BUTTON_PAUSE                      0000000A
C                                 00000000
C1INV                             00000004
C1OUT_CMCON                       00000006
C1OUT_PORTA                       00000004
C2INV                             00000005
C2OUT_CMCON                       00000007
C2OUT_PORTA                       00000005
CCP1                              00000002
CCP1CON                           00000FBD
CCP1IE                            00000002
CCP1IF                            00000002
CCP1IP                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP1_BIT                          00000002
CCP1_REG                          00000F82
CCP2CON                           00000FBA
CCP2IE                            00000000
CCP2IF                            00000000
CCP2IP                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCP2_BIT                          00000001
CCP2_PORTB                        00000003
CCP2_PORTC                        00000001
CCP2_REG                          00000F82
CCPR1                             00000FBE
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 48


SYMBOL TABLE
  LABEL                             VALUE 

CCPR1H                            00000FBF
CCPR1L                            00000FBE
CCPR2                             00000FBB
CCPR2H                            00000FBC
CCPR2L                            00000FBB
CFGS                              00000006
CHK?RP                            
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CIS                               00000003
CK                                00000006
CKE                               00000006
CKP                               00000004
CLKI                              00000007
CLKO                              00000006
CLRWDT?                           
CLRWDT?NOP                        
CM0                               00000000
CM1                               00000001
CM2                               00000002
CMCON                             00000FB4
CMIE                              00000006
CMIF                              00000006
CMIP                              00000006
CMP                               0000013A
CMPLE                             00000134
CMPLE?WCL                         
CMPLE_USED                        00000001
CMP_USED                          00000001
CREN                              00000004
CSRC                              00000007
CVR0                              00000000
CVR1                              00000001
CVR2                              00000002
CVR3                              00000003
CVRCON                            00000FB5
CVREF                             00000002
CVREN                             00000007
CVROE                             00000006
CVRR                              00000005
CVRSS                             00000004
D                                 00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
DDRA                              TRISA
DDRB                              TRISB
DDRC                              TRISC
DDRD                              TRISD
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 49


SYMBOL TABLE
  LABEL                             VALUE 

DDRE                              TRISE
DEBUGIN_BIT                       00000000
DEBUGIN_MODE                      00000001
DEBUGIN_REG                       00000F81
DEBUG_BAUD                        00000960
DEBUG_BIT                         00000000
DEBUG_DELAY                       0000019A
DEBUG_MODE                        00000001
DEBUG_REG                         00000F81
DIV                               0000015A
DIV32DIV                          0000015E
DIV_USED                          00000001
DONE                              00000001
DUNN                              00000196
DUNN3                             00000198
DUNNRET                           0000019A
DUNN_USED                         00000001
D_A                               00000005
D_NOT_A                           00000005
ECCP1AS                           00000FB6
ECCP1DEL                          00000FB7
ECCPAS                            00000FB6
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             00000FA9
EECON1                            00000FA6
EECON2                            00000FA7
EEDATA                            00000FA8
EEIE                              00000004
EEIF                              00000004
EEIP                              00000004
EEPGD                             00000007
EEPROM_START                      00F00000
FAST                              00000001
FERR                              00000002
FLAGS                             00000000
FLAGS_USED                        00000001
FLT0                              00000000
FLTS                              00000002
FREE                              00000004
FSR0                              00000000
FSR0H                             00000FEA
FSR0L                             00000FE9
FSR1                              00000001
FSR1H                             00000FE2
FSR1L                             00000FE1
FSR2                              00000002
FSR2H                             00000FDA
FSR2L                             00000FD9
GCEN                              00000007
GIE                               00000007
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 50


SYMBOL TABLE
  LABEL                             VALUE 

GIEH                              00000007
GIEL                              00000006
GIE_GIEH                          00000007
GO                                00000001
GOP                               00000013
GOTO?L                            
GO_DONE                           00000001
GO_NOT_DONE                       00000001
HLVDCON                           00000FD2
HLVDEN                            00000004
HLVDIE                            00000002
HLVDIF                            00000002
HLVDIN                            00000005
HLVDIP                            00000002
HLVDL0                            00000000
HLVDL1                            00000001
HLVDL2                            00000002
HLVDL3                            00000003
HSER2_BAUD                        00000960
HSER2_BITS                        00000008
HSER2_RCSTA                       00000090
HSER2_SPBRG                       00000033
HSER2_TXSTA                       00000020
HSER_BAUD                         00000960
HSER_BITS                         00000008
HSER_PORT                         00000001
HSER_RCSTA                        00000090
HSER_SPBRG                        00000033
HSER_TXSTA                        00000020
I2CFIRSTFLAG                      FLAGS, 2
I2CREADFLAG                       FLAGS, 3
I2CSTOPFLAG                       FLAGS, 5
I2CSTOPSTRFLAG                    FLAGS, 6
I2CWRITEFLAG                      FLAGS, 4
IDLEN                             00000007
INDF0                             00000FEF
INDF1                             00000FE7
INDF2                             00000FDF
INIT                              0000019C
INT0                              00000000
INT0E                             00000004
INT0F                             00000001
INT0IE                            00000004
INT0IF                            00000001
INT1                              00000001
INT1E                             00000003
INT1F                             00000000
INT1IE                            00000003
INT1IF                            00000000
INT1IP                            00000006
INT1P                             00000006
INT2                              00000002
INT2E                             00000004
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

INT2F                             00000001
INT2IE                            00000004
INT2IF                            00000001
INT2IP                            00000007
INT2P                             00000007
INTCON                            00000FF2
INTCON2                           00000FF1
INTCON3                           00000FF0
INTEDG0                           00000006
INTEDG1                           00000005
INTEDG2                           00000004
INTSRC                            00000007
IOFS                              00000002
IPEN                              00000007
IPR1                              00000F9F
IPR2                              00000FA2
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRVST                             00000005
IVRST                             00000005
JUMPMAN                           0000018A
JUMPMAN_USED                      00000001
KBI0                              00000004
KBI1                              00000005
KBI2                              00000006
KBI3                              00000007
L00001                            00000226
L00002                            0000024E
L00003                            00000246
L00004                            0000024E
L?CALL                            
L?GOTO                            
LABEL?L                           
LATA                              00000F89
LATA0                             00000000
LATA1                             00000001
LATA2                             00000002
LATA3                             00000003
LATA4                             00000004
LATA5                             00000005
LATA6                             00000006
LATA7                             00000007
LATB                              00000F8A
LATB0                             00000000
LATB1                             00000001
LATB2                             00000002
LATB3                             00000003
LATB4                             00000004
LATB5                             00000005
LATB6                             00000006
LATB7                             00000007
LATC                              00000F8B
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

LATC0                             00000000
LATC1                             00000001
LATC2                             00000002
LATC3                             00000003
LATC4                             00000004
LATC5                             00000005
LATC6                             00000006
LATC7                             00000007
LCDCDFLAG                         FLAGS, 0
LCDINITFLAG                       FLAGS, 1
LCDOUT                            00000008
LCDOUT?C                          
LCDOUTCOUNT?C                     
LCDOUTDEC?                        
LCDOUTJ                           00000006
LCDOUTJ_USED                      00000001
LCDOUTNUM?W                       
LCDOUT_USED                       00000001
LCD_BITS                          4
LCD_COMMANDUS                     000007D0
LCD_DATAUS                        00000032
LCD_DBIT                          4
LCD_DREG                          PORTC
LCD_EBIT                          3
LCD_EREG                          PORTC
LCD_LINES                         2
LCD_RSBIT                         0
LCD_RSREG                         PORTC
LCD_RWBIT                         00000000
LCD_RWREG                         00000F82
LVDCON                            00000FD2
LVDEN                             00000004
LVDIE                             00000002
LVDIF                             00000002
LVDIN                             00000005
LVDIP                             00000002
LVDL0                             00000000
LVDL1                             00000001
LVDL2                             00000002
LVDL3                             00000003
LVV0                              00000000
LVV1                              00000001
LVV2                              00000002
LVV3                              00000003
MCLR                              00000003
MOVE?AB                           
MOVE?AT                           
MOVE?AW                           
MOVE?AWW                          
MOVE?BA                           
MOVE?BB                           
MOVE?BT                           
MOVE?BW                           
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

MOVE?CA                           
MOVE?CB                           
MOVE?CT                           
MOVE?CW                           
MOVE?TA                           
MOVE?TB                           
MOVE?TT                           
MOVE?TW                           
MOVE?WA                           
MOVE?WB                           
MOVE?WT                           
MOVE?WW                           
MOVE?WWA                          
N                                 00000004
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_MCLR                          00000003
NOT_PD                            00000002
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RI                            00000004
NOT_SS                            00000005
NOT_T1SYNC                        00000002
NOT_T3SYNC                        00000002
NOT_TO                            00000003
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OSC                               8
OSC1                              00000007
OSC2                              00000006
OSCCON                            00000FD3
OSCFIE                            00000007
OSCFIF                            00000007
OSCFIP                            00000007
OSCTUNE                           00000F9B
OSTS                              00000003
OV                                00000003
P                                 00000004
PAUSEUS                           0000010C
PAUSEUSL                          0000010E
PAUSEUS_USED                      00000001
PC                                00000FF9
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000FF9
PCLATH                            00000FFA
PCLATU                            00000FFB
PD                                00000002
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

PEIE                              00000006
PEIE_GIEL                         00000006
PEN                               00000002
PGC                               00000006
PGD                               00000007
PGM                               00000005
PIE1                              00000F9D
PIE2                              00000FA0
PIR                               00000F9E
PIR1                              00000F9E
PIR2                              00000FA1
PLLEN                             00000006
PLUSW0                            00000FEB
PLUSW1                            00000FE3
PLUSW2                            00000FDB
POR                               00000001
PORTA                             00000F80
PORTB                             00000F81
PORTC                             00000F82
PORTE                             00000F84
POSTDEC0                          00000FED
POSTDEC1                          00000FE5
POSTDEC2                          00000FDD
POSTINC0                          00000FEE
POSTINC1                          00000FE6
POSTINC2                          00000FDE
PR2                               00000FCB
PREINC0                           00000FEC
PREINC1                           00000FE4
PREINC2                           00000FDC
PREV_BANK                         00000000
PROD                              00000FF3
PRODH                             00000FF4
PRODL                             00000FF3
PRSEN                             00000007
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PWM1CON                           00000FB7
R                                 00000002
R0                                00000001
R1                                00000003
R2                                00000005
R3                                00000007
R4                                00000009
R5                                0000000B
R6                                0000000D
R7                                0000000F
R8                                00000011
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RAM_BANKS                         00000003
RAM_END                           000002FF
RAM_START                         00000000
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RBIP                              00000000
RBPU                              00000007
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCIP                              00000005
RCMT                              00000006
RCON                              00000FD0
RCREG                             00000FAE
RCSTA                             00000FAB
RD                                00000000
RD16                              00000007
RE3                               00000003
RESET_ORG                         00000000
RI                                00000004
RM1                               00000014
RM2                               00000015
RR1                               00000016
RR2                               00000017
RS1                               00000018
RS2                               00000019
RSEN                              00000001
RST?RP                            
RX                                00000007
RX9                               00000006
RX9D                              00000000
RXDTP                             00000005
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SBOREN                            00000006
SCK                               00000003
SCKP                              00000004
SCL                               00000003
SCS0                              00000000
SCS1                              00000001
SDA                               00000004
SDI                               00000004
SDO                               00000005
SEN                               00000000
SENDB                             00000003
SEROUT2DEC                        000000B0
SEROUT2DEC_USED                   00000001
SEROUT2SEND                       000000EC
SEROUT2SEND_USED                  00000001
SMP                               00000007
SP0                               00000000
SP1                               00000001
SP2                               00000002
SP3                               00000003
SP4                               00000004
SPBRG                             00000FAF
SPBRGH                            00000FB0
SPEN                              00000007
SREN                              00000005
SS                                00000005
SSPADD                            00000FC8
SSPBUF                            00000FC9
SSPCON1                           00000FC6
SSPCON2                           00000FC5
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPIP                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000FC7
STATUS                            00000FD8
STKFUL                            00000007
STKOVF                            00000007
STKPTR                            00000FFC
STKUNF                            00000006
SWDTE                             00000000
SWDTEN                            00000000
SYNC                              00000004
T016BIT                           00000006
T08BIT                            00000006
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

T0CKI                             00000004
T0CON                             00000FD5
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0PS0                             00000000
T0PS1                             00000001
T0PS2                             00000002
T0PS3                             00000003
T0SE                              00000004
T13CKI                            00000000
T1CKI                             00000000
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000FCD
T1OSCEN                           00000003
T1OSI                             00000001
T1OSO                             00000000
T1RUN                             00000006
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000FCA
T2OUTPS0                          00000003
T2OUTPS1                          00000004
T2OUTPS2                          00000005
T2OUTPS3                          00000006
T3CCP1                            00000003
T3CCP2                            00000006
T3CKPS0                           00000004
T3CKPS1                           00000005
T3CON                             00000FB1
T3SYNC                            00000002
TABLAT                            00000FF5
TBLPTR                            00000FF6
TBLPTRH                           00000FF7
TBLPTRL                           00000FF6
TBLPTRU                           00000FF8
TMR0                              00000FD6
TMR0H                             00000FD7
TMR0IE                            00000005
TMR0IF                            00000002
TMR0IP                            00000002
TMR0L                             00000FD6
TMR0ON                            00000007
TMR1                              00000FCE
TMR1CS                            00000001
TMR1H                             00000FCF
TMR1IE                            00000000
TMR1IF                            00000000
TMR1IP                            00000000
TMR1L                             00000FCE
TMR1ON                            00000000
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

TMR2                              00000FCC
TMR2IE                            00000001
TMR2IF                            00000001
TMR2IP                            00000001
TMR2ON                            00000002
TMR3                              00000FB2
TMR3CS                            00000001
TMR3H                             00000FB3
TMR3IE                            00000001
TMR3IF                            00000001
TMR3IP                            00000001
TMR3L                             00000FB2
TMR3ON                            00000000
TO                                00000003
TOS                               00000FFD
TOSH                              00000FFE
TOSL                              00000FFD
TOSU                              00000FFF
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000F92
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000F93
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000F94
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX9                               00000006
TX9D                              00000000
TXCKP                             00000004
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXIP                              00000004
TXREG                             00000FAD
TXSTA                             00000FAC
UA                                00000001
VCFG0                             00000004
VCFG1                             00000005
VDIRMAG                           00000007
VPP                               00000003
VREFN                             00000002
VREFP                             00000003
W                                 00000000
WCOL                              00000007
WDTCON                            00000FD1
WR                                00000001
WREG                              00000FE8
WREN                              00000002
WRERR                             00000003
WUE                               00000001
Z                                 00000002
_BOREN_NOSLP_2L                   000000FD
_BOREN_OFF_2L                     000000F9
_BOREN_ON_2L                      000000FB
_BOREN_SBORDIS_2L                 000000FF
_BORV_0_2L                        000000E7
_BORV_1_2L                        000000EF
_BORV_2_2L                        000000F7
_BORV_3_2L                        000000FF
_CCP2MX_PORTBE_3H                 000000FE
_CCP2MX_PORTC_3H                  000000FF
_CONFIG1H                         00300001
_CONFIG2H                         00300003
_CONFIG2L                         00300002
_CONFIG3H                         00300005
_CONFIG4L                         00300006
_CONFIG5H                         00300009
_CONFIG5L                         00300008
_CONFIG6H                         0030000B
_CONFIG6L                         0030000A
_CONFIG7H                         0030000D
_CONFIG7L                         0030000C
_CP0_OFF_5L                       000000FF
_CP0_ON_5L                        000000FE
_CP1_OFF_5L                       000000FF
_CP1_ON_5L                        000000FD
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

_CPB_OFF_5H                       000000FF
_CPB_ON_5H                        000000BF
_CPD_OFF_5H                       000000FF
_CPD_ON_5H                        0000007F
_DEBUG_OFF_4L                     000000FF
_DEBUG_ON_4L                      0000007F
_DEVID1                           003FFFFE
_DEVID2                           003FFFFF
_EBTR0_OFF_7L                     000000FF
_EBTR0_ON_7L                      000000FE
_EBTR1_OFF_7L                     000000FF
_EBTR1_ON_7L                      000000FD
_EBTRB_OFF_7H                     000000FF
_EBTRB_ON_7H                      000000BF
_FCMEN_OFF_1H                     000000BF
_FCMEN_ON_1H                      000000FF
_IDLOC0                           00200000
_IDLOC1                           00200001
_IDLOC2                           00200002
_IDLOC3                           00200003
_IDLOC4                           00200004
_IDLOC5                           00200005
_IDLOC6                           00200006
_IDLOC7                           00200007
_IESO_OFF_1H                      0000007F
_IESO_ON_1H                       000000FF
_LPT1OSC_OFF_3H                   000000FB
_LPT1OSC_ON_3H                    000000FF
_LVP_OFF_4L                       000000FB
_LVP_ON_4L                        000000FF
_MCLRE_OFF_3H                     0000007F
_MCLRE_ON_3H                      000000FF
_OSC_ECIO6_1H                     000000F5
_OSC_EC_1H                        000000F4
_OSC_HSPLL_1H                     000000F6
_OSC_HS_1H                        000000F2
_OSC_INTIO67_1H                   000000F8
_OSC_INTIO7_1H                    000000F9
_OSC_LP_1H                        000000F0
_OSC_RCIO6_1H                     000000F7
_OSC_RC_1H                        000000F3
_OSC_XT_1H                        000000F1
_PBADEN_OFF_3H                    000000FD
_PBADEN_ON_3H                     000000FF
_PORTH                            00000F82
_PORTL                            00000F81
_PWRT_OFF_2L                      000000FF
_PWRT_ON_2L                       000000FE
_STVREN_OFF_4L                    000000FE
_STVREN_ON_4L                     000000FF
_TRISH                            00000F94
_TRISL                            00000F93
_USED                             00000001
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

_WDTPS_1024_2H                    000000F5
_WDTPS_128_2H                     000000EF
_WDTPS_16384_2H                   000000FD
_WDTPS_16_2H                      000000E9
_WDTPS_1_2H                       000000E1
_WDTPS_2048_2H                    000000F7
_WDTPS_256_2H                     000000F1
_WDTPS_2_2H                       000000E3
_WDTPS_32768_2H                   000000FF
_WDTPS_32_2H                      000000EB
_WDTPS_4096_2H                    000000F9
_WDTPS_4_2H                       000000E5
_WDTPS_512_2H                     000000F3
_WDTPS_64_2H                      000000ED
_WDTPS_8192_2H                    000000FB
_WDTPS_8_2H                       000000E7
_WDT_OFF_2H                       000000FE
_WDT_ON_2H                        000000FF
_WRT0_OFF_6L                      000000FF
_WRT0_ON_6L                       000000FE
_WRT1_OFF_6L                      000000FF
_WRT1_ON_6L                       000000FD
_WRTB_OFF_6H                      000000FF
_WRTB_ON_6H                       000000BF
_WRTC_OFF_6H                      000000FF
_WRTC_ON_6H                       000000DF
_WRTD_OFF_6H                      000000FF
_WRTD_ON_6H                       0000007F
_XINST_OFF_4L                     000000BF
_XINST_ON_4L                      000000FF
__18F2420                         00000001
_adval                            0000001A
_array                            00000020
_i                                0000001C
_op                               0000001E
cmpnoteq                          00000146
divloop                           00000162
divok                             0000017C
lcdchkcd                          00000080
lcdloop                           0000008E
lcdout1                           00000064
lcdoutcom                         00000062
lcdsend                           0000008C
main                              0000019C
pauseush                          00000120
pauseusloop                       0000011A
serout2ddig                       000000DC
serout2send1                      000000FC
MPASM  5.51                         ARRAY.ASM   1-26-2018  11:45:19         PAGE 62


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXX-------- ---------------- ---------------- ----------------
0000 : XXXXXXXX-------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Bytes Used:   848
Program Memory Bytes Free: 15536


Errors   :     0
Warnings :     0 reported,     4 suppressed
Messages :     0 reported,     0 suppressed

