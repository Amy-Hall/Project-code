define OSC 4
OSCCON = %01000000

DEFINE LCD_DREG PORTC
DEFINE LCD_DBIT 4
DEFINE LCD_RSREG PORTC
DEFINE LCD_RSBIT 0
DEFINE LCD_EREG PORTC
DEFINE LCD_EBIT 3
DEFINE LCD_BITS 4
DEFINE LCD_LINES 2
DEFINE ADC_BITS 10
DEFINE ADC_SAMPLEUS 50

define CCP1_REG PORTC
define CCP1_BIT 2

t1adval VAR WORD
t1resistance var WORD
t1res_upper var word     
t1res_lower var word     
t1temp_upper var word 
t1temp_lower var word 
resistor_ref var word[20]
temp_ref var WORD[20]
i var word
n var word
t1temp_integer var word
t1temp_decimal var word

t0adval VAR WORD
t0resistance var WORD
t0res_upper var word     
t0res_lower var word     
t0temp_upper var word 
t0temp_lower var word
t0temp_integer var word
t0temp_decimal var word

temp_ref[0] = 5
temp_ref[1] = 10
temp_ref[2] = 15
temp_ref[3] = 20
temp_ref[4] = 25
temp_ref[5] = 30
temp_ref[6] = 35
temp_ref[7] = 40
temp_ref[8] = 45
temp_ref[9] = 50
temp_ref[10] = 55
temp_ref[11] = 60
temp_ref[12] = 65
temp_ref[13] = 70
temp_ref[14] = 75
temp_ref[15] = 80
temp_ref[16] = 85
temp_ref[17] = 90
temp_ref[18] = 95
temp_ref[19] = 100

resistor_ref[0]= 5083
resistor_ref[1]= 4081
resistor_ref[2]= 3299
resistor_ref[3]= 2685
resistor_ref[4]= 2200
resistor_ref[5]= 1813
resistor_ref[6]= 1503
resistor_ref[7]= 1254
resistor_ref[8]= 1051
resistor_ref[9]= 886
resistor_ref[10]= 750
resistor_ref[11]= 639
resistor_ref[12]= 546
resistor_ref[13]= 468
resistor_ref[14]= 404
resistor_ref[15]= 350
resistor_ref[16]= 304
resistor_ref[17]= 266
resistor_ref[18]= 233
resistor_ref[19]= 204


throttle var word
pwm_val var word


ADCON1 = %00000000 ' Right-Justify result in ADRESH:ADRESL registers
ADCON2 = %10000111
TRISA = %11111111 ' Set PORTA to all input 
TRISC = %00000000

main:
    gosub get_temp0
    gosub get_temp1
    ADCON0 = %00001001
    adcin 2, throttle  
    pwm_val= (throttle*25/102)
      
    HPWM 2, pwm_val, 245    'This multiplied by 4, actually gives 62Hz
    
    LCDout $FE, 1, dec pwm_val
    LCDOUT $FE, $C0, "Temp:", dec t0temp_integer, ".", dec t0temp_decimal
    LCDOUT $FE, $94, "Temp:", dec t1temp_integer, ".", DEC t1temp_decimal
    goto main
end

get_temp0:
    ADCON0 = %00000001
    ADCIN 0, t0adval 
    t0resistance = (22000/t0adval)*102 -2200
    
    if (t0resistance > resistor_ref[0]) or (t0resistance < resistor_ref[11]) then
   '     LCDOUT $FE, 1, dec t1resistance
        LCDOUT $FE, $D4, "t0 out of range" 
    else 
        For i = 0 to 11 
            if t0resistance < resistor_ref[i] and t0resistance >= resistor_ref[i+1] then
                t0res_lower = resistor_ref[i+1]
                t0res_upper = resistor_ref[i] 
                t0temp_lower = temp_ref[i] 
                t0temp_upper = temp_ref[i+1] 
            endif 
        next i  
        
        t0temp_integer = (t0temp_upper*10 - ((t0resistance-t0res_lower)*50/(t0res_upper - t0res_lower)))/10
        t0temp_decimal = (t0temp_upper*10 - ((t0resistance-t0res_lower)*50/(t0res_upper - t0res_lower)))//10
        
    endif
return

get_temp1:
    ADCON0 = %00000101
    ADCIN 1, t1adval 
    t1resistance = ((1024*44)/t1adval)*50 -2200
    
    if (t1resistance > resistor_ref[0]) or (t1resistance < resistor_ref[11]) then
   '     LCDOUT $FE, 1, dec t1resistance
        'LCDOUT $FE, $C0, "out of range" 
    else 
        For i = 0 to 11 
            if t1resistance < resistor_ref[i] and t1resistance >= resistor_ref[i+1] then
                t1res_lower = resistor_ref[i+1]
                t1res_upper = resistor_ref[i] 
                t1temp_lower = temp_ref[i] 
                t1temp_upper = temp_ref[i+1] 
            endif 
        next i  
        t1temp_integer = (t1temp_upper*10 - ((t1resistance-t1res_lower)*50/(t1res_upper - t1res_lower)))/10
        t1temp_decimal = (t1temp_upper*10 - ((t1resistance-t1res_lower)*50/(t1res_upper - t1res_lower)))//10
    endif
return


